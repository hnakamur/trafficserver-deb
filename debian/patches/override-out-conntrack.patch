diff --git a/proxy/hdrs/HdrToken.cc b/proxy/hdrs/HdrToken.cc
index 55fe5200a..b29a3229d 100644
--- a/proxy/hdrs/HdrToken.cc
+++ b/proxy/hdrs/HdrToken.cc
@@ -110,7 +110,10 @@ static const char *_hdrtoken_strs[] = {
   "X-ID", "X-Forwarded-For", "TE", "Strict-Transport-Security", "100-continue",
 
   // RFC-2739
-  "Forwarded"};
+  "Forwarded",
+
+  // Override hostname for outbound connection tracking
+  "@Ats-OutConnTrack"};
 
 static HdrTokenTypeBinding _hdrtoken_strs_type_initializers[] = {
   {"file", HDRTOKEN_TYPE_SCHEME},
@@ -359,7 +362,10 @@ static const char *_hdrtoken_commonly_tokenized_strs[] = {
   "X-ID", "X-Forwarded-For", "TE", "Strict-Transport-Security", "100-continue",
 
   // RFC-2739
-  "Forwarded"};
+  "Forwarded",
+
+  // Override hostname for outbound connection tracking
+  "@Ats-OutConnTrack"};
 
 /*-------------------------------------------------------------------------
   -------------------------------------------------------------------------*/
diff --git a/proxy/hdrs/MIME.cc b/proxy/hdrs/MIME.cc
index 35a1159b7..71e92a819 100644
--- a/proxy/hdrs/MIME.cc
+++ b/proxy/hdrs/MIME.cc
@@ -152,6 +152,7 @@ const char *MIME_FIELD_FORWARDED;
 const char *MIME_FIELD_SEC_WEBSOCKET_KEY;
 const char *MIME_FIELD_SEC_WEBSOCKET_VERSION;
 const char *MIME_FIELD_HTTP2_SETTINGS;
+const char *MIME_FIELD_ATS_OUTCONNTRACK;
 
 const char *MIME_VALUE_BYTES;
 const char *MIME_VALUE_CHUNKED;
@@ -268,6 +269,7 @@ int MIME_LEN_FORWARDED;
 int MIME_LEN_SEC_WEBSOCKET_KEY;
 int MIME_LEN_SEC_WEBSOCKET_VERSION;
 int MIME_LEN_HTTP2_SETTINGS;
+int MIME_LEN_ATS_OUTCONNTRACK;
 
 int MIME_WKSIDX_ACCEPT;
 int MIME_WKSIDX_ACCEPT_CHARSET;
@@ -347,6 +349,7 @@ int MIME_WKSIDX_FORWARDED;
 int MIME_WKSIDX_SEC_WEBSOCKET_KEY;
 int MIME_WKSIDX_SEC_WEBSOCKET_VERSION;
 int MIME_WKSIDX_HTTP2_SETTINGS;
+int MIME_WKSIDX_ATS_OUTCONNTRACK;
 
 /***********************************************************************
  *                                                                     *
@@ -737,6 +740,7 @@ mime_init()
     MIME_FIELD_X_ID                      = hdrtoken_string_to_wks("X-ID");
     MIME_FIELD_X_FORWARDED_FOR           = hdrtoken_string_to_wks("X-Forwarded-For");
     MIME_FIELD_FORWARDED                 = hdrtoken_string_to_wks("Forwarded");
+    MIME_FIELD_ATS_OUTCONNTRACK          = hdrtoken_string_to_wks("@Ats-OutConnTrack");
 
     MIME_FIELD_SEC_WEBSOCKET_KEY     = hdrtoken_string_to_wks("Sec-WebSocket-Key");
     MIME_FIELD_SEC_WEBSOCKET_VERSION = hdrtoken_string_to_wks("Sec-WebSocket-Version");
@@ -818,6 +822,7 @@ mime_init()
     MIME_LEN_X_ID                      = hdrtoken_wks_to_length(MIME_FIELD_X_ID);
     MIME_LEN_X_FORWARDED_FOR           = hdrtoken_wks_to_length(MIME_FIELD_X_FORWARDED_FOR);
     MIME_LEN_FORWARDED                 = hdrtoken_wks_to_length(MIME_FIELD_FORWARDED);
+    MIME_LEN_ATS_OUTCONNTRACK          = hdrtoken_wks_to_length(MIME_FIELD_ATS_OUTCONNTRACK);
 
     MIME_LEN_SEC_WEBSOCKET_KEY     = hdrtoken_wks_to_length(MIME_FIELD_SEC_WEBSOCKET_KEY);
     MIME_LEN_SEC_WEBSOCKET_VERSION = hdrtoken_wks_to_length(MIME_FIELD_SEC_WEBSOCKET_VERSION);
@@ -901,6 +906,7 @@ mime_init()
     MIME_WKSIDX_SEC_WEBSOCKET_KEY         = hdrtoken_wks_to_index(MIME_FIELD_SEC_WEBSOCKET_KEY);
     MIME_WKSIDX_SEC_WEBSOCKET_VERSION     = hdrtoken_wks_to_index(MIME_FIELD_SEC_WEBSOCKET_VERSION);
     MIME_WKSIDX_HTTP2_SETTINGS            = hdrtoken_wks_to_index(MIME_FIELD_HTTP2_SETTINGS);
+    MIME_WKSIDX_ATS_OUTCONNTRACK          = hdrtoken_wks_to_index(MIME_FIELD_ATS_OUTCONNTRACK);
 
     MIME_VALUE_BYTES                = hdrtoken_string_to_wks("bytes");
     MIME_VALUE_CHUNKED              = hdrtoken_string_to_wks("chunked");
diff --git a/proxy/hdrs/MIME.h b/proxy/hdrs/MIME.h
index b0e9ac17b..fdb8c1981 100644
--- a/proxy/hdrs/MIME.h
+++ b/proxy/hdrs/MIME.h
@@ -389,6 +389,7 @@ extern const char *MIME_FIELD_FORWARDED;
 extern const char *MIME_FIELD_SEC_WEBSOCKET_KEY;
 extern const char *MIME_FIELD_SEC_WEBSOCKET_VERSION;
 extern const char *MIME_FIELD_HTTP2_SETTINGS;
+extern const char *MIME_FIELD_ATS_OUTCONNTRACK;
 
 extern const char *MIME_VALUE_BYTES;
 extern const char *MIME_VALUE_CHUNKED;
@@ -490,6 +491,7 @@ extern int MIME_LEN_ATS_INTERNAL;
 extern int MIME_LEN_X_ID;
 extern int MIME_LEN_X_FORWARDED_FOR;
 extern int MIME_LEN_FORWARDED;
+extern int MIME_LEN_ATS_OUTCONNTRACK;
 
 extern int MIME_LEN_BYTES;
 extern int MIME_LEN_CHUNKED;
@@ -595,6 +597,7 @@ extern int MIME_WKSIDX_X_ID;
 extern int MIME_WKSIDX_SEC_WEBSOCKET_KEY;
 extern int MIME_WKSIDX_SEC_WEBSOCKET_VERSION;
 extern int MIME_WKSIDX_HTTP2_SETTINGS;
+extern int MIME_WKSIDX_ATS_OUTCONNTRACK;
 
 /***********************************************************************
  *                                                                     *
diff --git a/proxy/http/HttpConnectionCount.h b/proxy/http/HttpConnectionCount.h
index bb953150b..487fb240a 100644
--- a/proxy/http/HttpConnectionCount.h
+++ b/proxy/http/HttpConnectionCount.h
@@ -85,6 +85,7 @@ public:
     ConnAddr caddr(addr, hostname_hash, match_type);
     ink_mutex_acquire(&_mutex);
     int count = _hostCount.get(caddr);
+    Debug("out_conn_track", "incrementCount hash=%" PRIx64 ", count=%d, delta=%d", hostname_hash.u64[0], count, delta);
     _hostCount.put(caddr, count + delta);
     ink_mutex_release(&_mutex);
   }
diff --git a/proxy/http/HttpSM.cc b/proxy/http/HttpSM.cc
index f22271487..4dfa88144 100644
--- a/proxy/http/HttpSM.cc
+++ b/proxy/http/HttpSM.cc
@@ -1702,6 +1702,25 @@ HttpSM::handle_api_return()
   }
 }
 
+void
+HttpSM::set_hostname_hash_once(ats::CryptoHash& hostname_hash)
+{
+  if (CRYPTO_HASH_ZERO == hostname_hash) {
+    int name_len = 0;
+    const char *name =
+      t_state.hdr_info.client_request.value_get(MIME_FIELD_ATS_OUTCONNTRACK, MIME_LEN_ATS_OUTCONNTRACK, &name_len);
+    if (name) {
+      CryptoContext().hash_immediate(hostname_hash, name, name_len);
+      SMDebug("out_conn_track", "@Ats-OutConnTrack=\"%.*s\", hash=%" PRIx64, name_len, name, hostname_hash.u64[0]);
+    } else {
+      name = t_state.current.server->name;
+      name_len = strlen(name);
+      CryptoContext().hash_immediate(hostname_hash, name, name_len);
+      SMDebug("out_conn_track", "@Ats-OutConnTrack=nil, server_name=\"%.*s\", hash=%" PRIx64, name_len, name, hostname_hash.u64[0]);
+    }
+  }
+}
+
 //////////////////////////////////////////////////////////////////////////////
 //
 //  HttpSM::state_http_server_open()
@@ -1738,7 +1757,7 @@ HttpSM::state_http_server_open(int event, void *data)
        UnixNetVConnection *server_vc = (UnixNetVConnection*)data;
        printf("client fd is :%d , server fd is %d\n",vc->con.fd,
        server_vc->con.fd); */
-    session->attach_hostname(t_state.current.server->name);
+    set_hostname_hash_once(session->hostname_hash);
     session->new_connection(static_cast<NetVConnection *>(data));
     session->state = HSS_ACTIVE;
 
@@ -3029,7 +3048,7 @@ HttpSM::tunnel_handler_server(int event, HttpTunnelProducer *p)
       t_state.client_info.keep_alive = HTTP_NO_KEEPALIVE;
     }
   } else {
-    server_session->attach_hostname(t_state.current.server->name);
+    set_hostname_hash_once(server_session->hostname_hash);
     server_session->server_trans_stat--;
     HTTP_DECREMENT_DYN_STAT(http_current_server_transactions_stat);
 
@@ -4883,8 +4902,17 @@ HttpSM::do_http_server_open(bool raw)
     ConnectionCount *connections = ConnectionCount::getInstance();
 
     CryptoHash hostname_hash;
-    CryptoContext().hash_immediate(hostname_hash, static_cast<const void *>(t_state.current.server->name),
-                                   static_cast<int>(strlen(t_state.current.server->name)));
+    int ats_outconntrack_len = 0;
+    const char *ats_outconntrack_val =
+      t_state.hdr_info.client_request.value_get(MIME_FIELD_ATS_OUTCONNTRACK, MIME_LEN_ATS_OUTCONNTRACK, &ats_outconntrack_len);
+    if (ats_outconntrack_val) {
+      CryptoContext().hash_immediate(hostname_hash, static_cast<const void *>(ats_outconntrack_val), ats_outconntrack_len);
+      SMDebug("out_conn_track", "@Ats-OutConnTrack=\"%.*s\", hash=%" PRIx64, ats_outconntrack_len, ats_outconntrack_val, hostname_hash.u64[0]);
+    } else {
+      CryptoContext().hash_immediate(hostname_hash, static_cast<const void *>(t_state.current.server->name),
+                                     static_cast<int>(strlen(t_state.current.server->name)));
+      SMDebug("out_conn_track", "@Ats-OutConnTrack=nil, server_name=\"%s\", hash=%" PRIx64, t_state.current.server->name, hostname_hash.u64[0]);
+    }
 
     auto ccount = connections->getCount(t_state.current.server->dst_addr, hostname_hash,
                                         (TSServerSessionSharingMatchType)t_state.txn_conf->server_session_sharing_match);
@@ -4896,6 +4924,7 @@ HttpSM::do_http_server_open(bool raw)
       Warning("[%" PRId64 "] too many connections (%d) for this host (%" PRId64 "): %s", sm_id, ccount,
               t_state.txn_conf->origin_max_connections, addrbuf);
       ink_assert(pending_action == nullptr);
+      SMDebug("out_conn_track", "throttled count=%d for hash=%" PRIx64 ", max=%" PRId64, ccount, hostname_hash.u64[0], t_state.txn_conf->origin_max_connections);
 
       // if we were previously queued, or the queue is disabled-- just reschedule
       if (t_state.origin_request_queued || t_state.txn_conf->origin_max_connections_queue < 0) {
@@ -5282,7 +5311,7 @@ HttpSM::release_server_session(bool serve_from_cache)
       plugin_tunnel_type == HTTP_NO_PLUGIN_TUNNEL) {
     HTTP_DECREMENT_DYN_STAT(http_current_server_transactions_stat);
     server_session->server_trans_stat--;
-    server_session->attach_hostname(t_state.current.server->name);
+    set_hostname_hash_once(server_session->hostname_hash);
     if (t_state.www_auth_content == HttpTransact::CACHE_AUTH_NONE || serve_from_cache == false) {
       // Must explicitly set the keep_alive_no_activity time before doing the release
       server_session->get_netvc()->set_inactivity_timeout(HRTIME_SECONDS(t_state.txn_conf->keep_alive_no_activity_timeout_out));
@@ -5370,8 +5399,17 @@ HttpSM::handle_http_server_open()
   // if we were a queued request, we need to decrement the queue size-- as we got a connection
   if (t_state.origin_request_queued) {
     CryptoHash hostname_hash;
-    CryptoContext().hash_immediate(hostname_hash, static_cast<const void *>(t_state.current.server->name),
-                                   strlen(t_state.current.server->name));
+    int ats_outconntrack_len = 0;
+    const char *ats_outconntrack_val =
+      t_state.hdr_info.client_request.value_get(MIME_FIELD_ATS_OUTCONNTRACK, MIME_LEN_ATS_OUTCONNTRACK, &ats_outconntrack_len);
+    if (ats_outconntrack_val) {
+      CryptoContext().hash_immediate(hostname_hash, static_cast<const void *>(ats_outconntrack_val), ats_outconntrack_len);
+      SMDebug("out_conn_track", "@Ats-OutConnTrack=\"%.*s\", hash=%" PRIx64, ats_outconntrack_len, ats_outconntrack_val, hostname_hash.u64[0]);
+    } else {
+      CryptoContext().hash_immediate(hostname_hash, static_cast<const void *>(t_state.current.server->name),
+                                     static_cast<int>(strlen(t_state.current.server->name)));
+      SMDebug("out_conn_track", "@Ats-OutConnTrack=nil, server_name=\"%s\", hash=%" PRIx64, t_state.current.server->name, hostname_hash.u64[0]);
+    }
 
     ConnectionCountQueue *waiting_connections = ConnectionCountQueue::getInstance();
     waiting_connections->incrementCount(t_state.current.server->dst_addr, hostname_hash,
diff --git a/proxy/http/HttpSM.h b/proxy/http/HttpSM.h
index b9ce2d7fd..131020910 100644
--- a/proxy/http/HttpSM.h
+++ b/proxy/http/HttpSM.h
@@ -474,6 +474,8 @@ protected:
 
   void wait_for_full_body();
 
+  void set_hostname_hash_once(ats::CryptoHash& hostname_hash);
+
   virtual void handle_api_return();
   void handle_server_setup_error(int event, void *data);
   void handle_http_server_open();
